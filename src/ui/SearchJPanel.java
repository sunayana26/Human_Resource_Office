/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.table.DefaultTableModel;
import model.EmployeeProfile;
import model.EmployeeProfileHistory;

/**
 *
 * @author sunayanashivanagi
 */
public class SearchJPanel extends javax.swing.JPanel {

    /* EmployeeProfileHistory eph;
    public ViewJPanel(EmployeeProfileHistory eph) {
        initComponents();
        this.eph = eph;
        populateTable();
    }*
     * Creates new form SearchJPanel
     */
    EmployeeProfileHistory eph;
    public SearchJPanel(EmployeeProfileHistory eph) {
        initComponents();
        setEph(eph);
        populateTable(getEph());
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbEmployeeHistory = new javax.swing.JTable();
        drpFields = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Employee");

        tbEmployeeHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee Id", "Name", "Age", "Gender", "Start Date", "Level", "Team Info", "Position ", "CellPhone Number", "EmailAddress"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbEmployeeHistory);

        drpFields.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Employee Id", "Age", "Gender", "Start Date", "Level", "Team Info", "Position Title", "CellPhone Number", "Email Address" }));
        drpFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpFieldsActionPerformed(evt);
            }
        });

        jLabel2.setText("Search");

        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jLabel3.setText("Select a field");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(jLabel3)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(drpFields, 0, 282, Short.MAX_VALUE)
                            .addComponent(search)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drpFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void drpFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpFieldsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drpFieldsActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_searchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Name"))
            searchByName(search.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Employee ID"))
            searchByEmployeeId(Integer.parseInt(search.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Age"))
            searchByAge(Integer.parseInt(search.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Gender"))
            searchByGender(search.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Start Date"))
            searchByStartDate(search.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Level"))
            searchByLevel(Integer.parseInt(search.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Team Info"))
            searchByTeamInfo(search.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Position Title"))
            searchByPositionTitle(search.getText());
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("CellPhone Number"))
            searchByCellPhoneNumber(Integer.parseInt(search.getText()));
        if(drpFields.getSelectedItem().toString().equalsIgnoreCase("Email Address"))
            searchByEmailAddress(search.getText());
    }//GEN-LAST:event_btnSearchActionPerformed

    public EmployeeProfileHistory getEph() {
        return eph;
    }

    public void setEph(EmployeeProfileHistory eph) {
        this.eph = eph;
    }
    
    private void searchByEmployeeId(int eid){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getEmployeeId()==eid){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByAge(int age){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getAge()==age){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByGender(String gender){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getGender().equalsIgnoreCase(gender)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByStartDate(String date){
        
//        EmployeeProfileHistory temp=new EmployeeProfileHistory();
//        temp.deleteAll();
//        for(EmployeeProfile ep: getEph().getHistory()){
//            if(ep.getStartDate().compareTo(new Date(date))>0){
//                temp.addNewEmployee(ep);
//            }
//        }
//        populateTable(temp);
    }
    private void searchByLevel(int level){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getLevel()==level){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByTeamInfo(String teamInfo){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getTeamInfo().equalsIgnoreCase(teamInfo)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByPositionTitle(String positionTitle){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getPositionTitle().equalsIgnoreCase(positionTitle)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByCellPhoneNumber(int cpn){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getCellPhoneNumber()==cpn){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
    private void searchByEmailAddress(String email){
        
        EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getEmailAddress().equalsIgnoreCase(email)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);
    }
 private void populateTable(EmployeeProfileHistory eph) {
        DefaultTableModel model = (DefaultTableModel) tbEmployeeHistory.getModel();
        model.setRowCount(0);
        
       for(EmployeeProfile e:eph.getHistory()) 
       {
           Object row[] = new Object[10];
           row[0]= e.getEmployeeId();
           row[1]=e.getName();
           row[2]=e.getAge();
           row[3]=e.getGender();
           row[4]=e.getStartDate();
           row[5]=e.getLevel();
           row[6]=e.getTeamInfo();
           row[7]=e.getPositionTitle();
           row[8]=e.getCellPhoneNumber();
           row[9]=e.getEmailAddress();
           
           model.addRow(row);    
    }
       
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> drpFields;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search;
    private javax.swing.JTable tbEmployeeHistory;
    // End of variables declaration//GEN-END:variables

    private void searchByName(String text) {
       EmployeeProfileHistory temp=new EmployeeProfileHistory();
        temp.deleteAll();
        for(EmployeeProfile ep: getEph().getHistory()){
            if(ep.getName().equalsIgnoreCase(text)){
                temp.addNewEmployee(ep);
            }
        }
        populateTable(temp);   
        
    }
}
